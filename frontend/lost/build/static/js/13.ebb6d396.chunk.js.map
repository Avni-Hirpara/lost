{"version":3,"sources":["components/Labels/LabelTreeTable.js","libs/graph-vis/styles.js","components/Labels/EditLabel.js","components/Labels/LabelTree.js","libs/graph-vis/mapTreeToGraph.js","components/Labels/CreateLabelTree.js","views/Labels.js","../node_modules/reactstrap/es/CardHeader.js","../node_modules/reactstrap/es/Alert.js"],"names":["amountOfLabels","LabelTreeTable","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getProps","bind","assertThisInitialized","state","rowInfo","column","_this2","onClick","e","handleOriginal","callback","index","_this3","data","labelTrees","react_default","a","createElement","Fragment","react_table_es","columns","Header","accessor","id","d","getAmountOfLabels","n","undefined","children","forEach","c","defaultPageSize","className","getTrProps","Component","styles","nodes","color","background","font","edges","updateLabel","actions","deleteLabel","createLabel","cleanLabelMessages","EditLabel","editLabelid","editLabelname","editLabeldescription","editLabelabbreviation","editLabelextID","createLabelname","createLabeldescription","createLabelabbreviation","createLabelextID","handleEditLabelName","handleEditLabelDescription","handleEditLabelAbbreviation","handleEditLabelExtID","handleCreateLabelName","handleCreateLabelDescription","handleCreateLabelAbbreviation","handleCreateLabelExtID","handleEditSave","handleEditDelete","handleCreateSave","handleCreateClear","updateLabelMessage","NotificationManager","success","concat","error","createLabelMessage","deleteLabelMessage","setState","target","value","label","_props$label","idx","name","description","abbreviation","external_id","updateData","clearSelectedLabel","saveData","is_root","parent_leaf_id","Row","style","padding","Col","xs","sm","lg","Card","CardHeader","CardBody","InputGroup","Input","type","placeholder","onChange","InputGroupAddon","addonType","Button","react_notifications_lib","Alert","connect","mapStateToProps","options","autoResize","height","layout","hierarchical","enabled","sortMethod","LabelTree","selectedLabel","selectLabel","findNode","currentNode","i","currentChild","result","length","labelTree","events","select","event","tree","graph","mapTreeToGraph","Error","assign","map","from","to","fillGraph","push","isLeaf","customizeNodes","customizeEdges","Labels_EditLabel","lib_default","createLabelTree","CreateLabelTree","createMessage","createLabelTreeMessage","getLabelTrees","Label","selectTree","selectedTreeId","Labels_CreateLabelTree","Labels_LabelTreeTable","trees","Labels_LabelTree","_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_2__","react__WEBPACK_IMPORTED_MODULE_2___default","prop_types__WEBPACK_IMPORTED_MODULE_3__","prop_types__WEBPACK_IMPORTED_MODULE_3___default","classnames__WEBPACK_IMPORTED_MODULE_4__","classnames__WEBPACK_IMPORTED_MODULE_4___default","_utils__WEBPACK_IMPORTED_MODULE_5__","propTypes","tag","string","cssModule","object","Tag","attributes","classes","defaultProps","__webpack_exports__","_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_2__","react__WEBPACK_IMPORTED_MODULE_3__","react__WEBPACK_IMPORTED_MODULE_3___default","prop_types__WEBPACK_IMPORTED_MODULE_4__","prop_types__WEBPACK_IMPORTED_MODULE_4___default","classnames__WEBPACK_IMPORTED_MODULE_5__","classnames__WEBPACK_IMPORTED_MODULE_5___default","_utils__WEBPACK_IMPORTED_MODULE_6__","_Fade__WEBPACK_IMPORTED_MODULE_7__","node","closeClassName","closeAriaLabel","fade","bool","isOpen","toggle","func","transition","shape","innerRef","oneOfType","unmountOnExit","alert-dismissible","closeClasses","alertTransition","baseClass","timeout","in","role","aria-label","aria-hidden"],"mappings":"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","file":"static/js/13.ebb6d396.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport ReactTable from 'react-table'\nimport 'react-table/react-table.css'\n\nvar amountOfLabels = 0;\n\nclass LabelTreeTable extends Component {\n    constructor(props){\n        super(props)\n        this.getProps = this.getProps.bind(this)\n    }\n    getProps(state, rowInfo, column) {\n        return {\n            onClick: (e, handleOriginal) => {\n                // if (handleOriginal) {\n                //     handleOriginal()\n                // }\n                this.props.callback(rowInfo.index)\n    \n            }\n        }\n    }\n    \n    render() {\n        const data = this.props.labelTrees\n        return (\n            <React.Fragment>\n                <ReactTable\n                    data={data}\n                    columns={ [\n                            {\n                                Header: 'Tree Name',\n                                accessor: 'name'\n                            }, {\n                                Header: 'Description',\n                                accessor: 'description'\n                            }, {\n                                Header: 'Amount of Labels',\n                                id: 'idx',\n                                accessor: (d) => {amountOfLabels = 0;return getAmountOfLabels(d) - 1}\n                            }, {\n                                Header: 'Date',\n                                accessor: 'timestamp'\n                            }\n                        ]\n                    }\n                \n                    defaultPageSize={10}\n                    className='-striped -highlight'\n                    getTrProps={(state, rowInfo, column) => this.getProps(state, rowInfo, column)}\n                    />\n            </React.Fragment>\n\n        )\n    }\n}\nfunction getAmountOfLabels(n) {\n    amountOfLabels += 1\n    if (n.children === undefined) \n        return 1;\n    n\n        .children\n        .forEach(function (c) {\n            getAmountOfLabels(c)\n        })\n    return amountOfLabels\n}\nexport default LabelTreeTable\n","export default {\n\tnodes: {\n\t\tcolor: {\n\t\t\tbackground: '#20a8d8',\n\t\t},\n\t\tfont: {\n\t\t\tcolor: 'white',\n\t\t},\n\t},\n\tedges: {\n\t\tcolor: {\n\t\t\tcolor: '#222222'\n\t\t}\n\t}\n}","import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport actions from '../../actions'\nimport {\n    Alert,\n    Card,\n    CardBody,\n    CardHeader,\n    Col,\n    Row,\n    Input,\n    InputGroup,\n    InputGroupAddon,\n    Button\n} from 'reactstrap'\nimport {NotificationManager, NotificationContainer} from 'react-notifications'\nimport 'react-notifications/lib/notifications.css';\n\nconst {updateLabel, deleteLabel, createLabel, cleanLabelMessages} = actions\n\nclass EditLabel extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            editLabelid: '',\n            editLabelname: '',\n            editLabeldescription: '',\n            editLabelabbreviation: '',\n            editLabelextID: '',\n            createLabelname: '',\n            createLabeldescription: '',\n            createLabelabbreviation: '',\n            createLabelextID: ''\n        }\n        this.handleEditLabelName = this\n            .handleEditLabelName\n            .bind(this);\n        this.handleEditLabelDescription = this\n            .handleEditLabelDescription\n            .bind(this);\n        this.handleEditLabelAbbreviation = this\n            .handleEditLabelAbbreviation\n            .bind(this);\n        this.handleEditLabelExtID = this\n            .handleEditLabelExtID\n            .bind(this);\n        this.handleCreateLabelName = this\n            .handleCreateLabelName\n            .bind(this);\n        this.handleCreateLabelDescription = this\n            .handleCreateLabelDescription\n            .bind(this);\n        this.handleCreateLabelAbbreviation = this\n            .handleCreateLabelAbbreviation\n            .bind(this);\n        this.handleCreateLabelExtID = this\n            .handleCreateLabelExtID\n            .bind(this);\n        this.handleEditSave = this\n            .handleEditSave\n            .bind(this);\n        this.handleEditDelete = this\n            .handleEditDelete\n            .bind(this);\n        this.handleCreateSave = this\n            .handleCreateSave\n            .bind(this);\n        this.handleCreateClear = this\n            .handleCreateClear\n            .bind(this);\n    }\n\n    componentDidUpdate() {\n        if (this.props.updateLabelMessage === 'success') {\n            NotificationManager.success(`Label ${this.state.editLabelname} updated.`)\n        } else if (this.props.updateLabelMessage !== '') {\n            NotificationManager.error(this.props.updateLabelMessage)\n        }\n        if (this.props.createLabelMessage === 'success') {\n            NotificationManager.success(`Label created.`)\n        } else if (this.props.createLabelMessage !== '') {\n            NotificationManager.error(this.props.createLabelMessage)\n        }\n        if (this.props.deleteLabelMessage === 'success') {\n            NotificationManager.success(`Label ${this.state.editLabelname} deleted.`)\n        } else if (this.props.deleteLabelMessage !== '') {\n            NotificationManager.error(this.props.deleteLabelMessage)\n        }\n        this\n            .props\n            .cleanLabelMessages()\n    }\n    handleEditLabelName(e) {\n        this.setState({editLabelname: e.target.value})\n    }\n    handleEditLabelDescription(e) {\n        this.setState({editLabeldescription: e.target.value})\n    }\n    handleEditLabelAbbreviation(e) {\n        this.setState({editLabelabbreviation: e.target.value})\n    }\n    handleEditLabelExtID(e) {\n        this.setState({editLabelextID: e.target.value})\n    }\n\n    handleCreateLabelName(e) {\n        this.setState({\n            createLabelname: e.target.value\n        })\n    }\n    handleCreateLabelDescription(e) {\n        this.setState({createLabeldescription: e.target.value})\n    }\n    handleCreateLabelAbbreviation(e) {\n        this.setState({createLabelabbreviation: e.target.value})\n    }\n    handleCreateLabelExtID(e) {\n        this.setState({createLabelextID: e.target.value})\n    }\n    componentWillReceiveProps(props) {\n        if (props.label) {\n            const {idx, name, description, abbreviation, external_id} = props.label\n            this.setState({\n                editLabelid: idx,\n                editLabelname: name\n                    ? name\n                    : '',\n                editLabeldescription: description\n                    ? description\n                    : '',\n                editLabelabbreviation: abbreviation\n                    ? abbreviation\n                    : '',\n                editLabelextID: external_id\n                    ? external_id\n                    : ''\n            })\n        }\n    }\n\n    handleEditSave() {\n        const updateData = {\n            id: this.state.editLabelid,\n            name: this.state.editLabelname,\n            description: this.state.editLabeldescription,\n            abbreviation: this.state.editLabelabbreviation,\n            external_id: this.state.editLabelextID\n        }\n        this\n            .props\n            .updateLabel(updateData)\n    }\n    handleEditDelete() {\n        this\n            .props\n            .deleteLabel({id: this.state.editLabelid})\n        this\n            .props\n            .clearSelectedLabel()\n\n    }\n    handleCreateSave() {\n        const saveData = {\n            is_root: false,\n            name: this.state.createLabelname,\n            description: this.state.createLabeldescription,\n            abbreviation: this.state.createLabelabbreviation,\n            external_id: this.state.createLabelextID,\n            parent_leaf_id: this.state.editLabelid\n        }\n        this\n            .props\n            .createLabel(saveData)\n        this.handleCreateClear()\n    }\n    handleCreateClear() {\n        this.setState({createLabelname: '', createLabeldescription: '', createLabelabbreviation: '', createLabelextID: ''})\n    }\n    render() {\n        if (this.props.label) {\n            return (\n                <React.Fragment>\n                    <Row\n                        style={{\n                        padding: '0 0 10px 0'\n                    }}>\n                        <Col xs='12' sm='12' lg='12'>\n                            <Card>\n                                <CardHeader>\n                                    Edit and Add Label\n                                </CardHeader>\n                                <CardBody>\n                                    <Row>\n                                        Edit\n                                    </Row>\n                                    <Row\n                                        style={{\n                                        padding: '0px 0px 10px 0px'\n                                    }}>\n                                        <InputGroup>\n                                            <Input\n                                                type=\"text\"\n                                                placeholder=\"name\"\n                                                value={this.state.editLabelname}\n                                                onChange={this.handleEditLabelName}></Input>\n                                            <Input\n                                                type=\"text\"\n                                                placeholder=\"description\"\n                                                value={this.state.editLabeldescription}\n                                                onChange={this.handleEditLabelDescription}></Input>\n                                            <Input\n                                                type=\"text\"\n                                                placeholder=\"abbreviation\"\n                                                value={this.state.editLabelabbreviation}\n                                                onChange={this.handleEditLabelAbbreviation}></Input>\n                                            <Input\n                                                type=\"text\"\n                                                placeholder=\"external ID\"\n                                                value={this.state.editLabelextID}\n                                                onChange={this.handleEditLabelExtID}></Input>\n                                            <InputGroupAddon addonType=\"append\">\n                                                <Button className='btn-info' onClick={this.handleEditSave}>Save</Button>\n                                                <Button className='btn-danger' onClick={this.handleEditDelete}>Delete</Button>\n                                            </InputGroupAddon>\n                                        </InputGroup>\n                                    </Row>\n                                    <Row>Add Child</Row>\n                                    <Row>\n                                        <InputGroup>\n                                            <Input\n                                                type=\"text\"\n                                                placeholder=\"name\"\n                                                value={this.state.createLabelname}\n                                                onChange={this.handleCreateLabelName}></Input>\n                                            <Input\n                                                type=\"text\"\n                                                placeholder=\"description\"\n                                                value={this.state.createLabeldescription}\n                                                onChange={this.handleCreateLabelDescription}></Input>\n                                            <Input\n                                                type=\"text\"\n                                                placeholder=\"abbreviation\"\n                                                value={this.state.createLabelabbreviation}\n                                                onChange={this.handleCreateLabelAbbreviation}></Input>\n                                            <Input\n                                                type=\"text\"\n                                                placeholder=\"external ID\"\n                                                value={this.state.createLabelextID}\n                                                onChange={this.handleCreateLabelExtID}></Input>\n                                            <InputGroupAddon addonType=\"append\">\n                                                <Button className='btn-info' onClick={this.handleCreateSave}>Save</Button>\n                                                <Button className='btn-danger' onClick={this.handleCreateClear}>&nbsp;Clear&nbsp;</Button>\n                                            </InputGroupAddon>\n                                        </InputGroup>\n                                    </Row>\n                                </CardBody>\n                            </Card>\n                        </Col>\n                    </Row>\n                    <NotificationContainer/>\n                </React.Fragment>\n            )\n        } else {\n            return (\n                <Alert className='alert-info'>Click on a label to edit it or create a new label to add at this point.\n                </Alert>\n            )\n        }\n    }\n}\n\nfunction mapStateToProps(state) {\n    return ({updateLabelMessage: state.label.updateLabelMessage, createLabelMessage: state.label.createLabelMessage, deleteLabelMessage: state.label.deleteLabelMessage})\n}\nexport default connect(mapStateToProps, {updateLabel, createLabel, deleteLabel, cleanLabelMessages})(EditLabel)","import React, {Component} from 'react'\nimport Graph from 'react-graph-vis';\nimport mapTreeToGraph from 'libs/graph-vis/mapTreeToGraph'\nimport EditLabel from '../../components/Labels/EditLabel'\n\nconst options = {\n    autoResize: true,\n    height: '600px',\n    layout: {\n        hierarchical: {\n            enabled: true,\n            sortMethod: 'directed'\n        }\n    },\n    edges: {\n        color: \"#000000\"\n    }\n}\n\nclass LabelTree extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            selectedLabel: null\n        }\n        this.selectLabel = this\n            .selectLabel\n            .bind(this);\n        this.clearSelectedLabel = this\n            .clearSelectedLabel\n            .bind(this);\n    }\n    selectLabel(id) {\n        if (id) {\n            this.setState({\n                selectedLabel: findNode(id, this.props.labelTree)\n            })\n        }\n    }\n    clearSelectedLabel(){\n        this.setState({\n            selectedLabel: null\n        })\n    }\n    render() {\n        const events = {\n            select: (event) => this.selectLabel(event.nodes[0])\n        }\n        const tree = this.props.labelTree\n        if (tree) {\n            const graph = mapTreeToGraph(tree)\n            return (\n                <React.Fragment>\n                    <EditLabel label={this.state.selectedLabel} clearSelectedLabel={this.clearSelectedLabel}></EditLabel>\n                    <Graph graph={graph} options={options} events={events}/>\n                </React.Fragment>\n            )\n        } else {\n            return (\n                <div>No Tree selected.</div>\n            )\n        }\n    }\n}\nfunction findNode(idx, currentNode) {\n    var i,\n        currentChild,\n        result;\n\n    if (idx === currentNode.idx) {\n        return currentNode;\n    } else {\n\n        // Use a for loop instead of forEach to avoid nested functions Otherwise\n        // \"return\" will not work properly\n        for (i = 0; i < currentNode.children.length; i += 1) {\n            currentChild = currentNode.children[i];\n\n            // Search in the current child\n            result = findNode(idx, currentChild);\n\n            // Return the result if the node has been found\n            if (result !== false) {\n                return result;\n            }\n        }\n\n        // The node has not been found and we have no more options\n        return false;\n    }\n}\n\nexport default LabelTree","import styles from './styles'\n\n\nexport default function mapTreeToGraph(tree, options){\n    if(!tree){\n        throw new Error(`Parameter 'tree' is undefined.`)\n    }\n\t\n\t// function mapNode(node){\n\t// \treturn {\n\t// \t\tid: node.idx,\n\t// \t\tlabel: node.name,\n\t// \t}\n\t// }\n\t// function mapEdge(node){\n\t// \treturn node.children.map(child => ({\n\t// \t\tfrom: node.idx,\n\t// \t\tto: child.idx,\n\t// \t}))\n\t// }\n\n    let nodes = [Object.assign({}, styles.nodes, {\n\t\tid: tree.idx,\n\t\tlabel: tree.name,\n\t})]\n    let edges = tree.children.map(c => Object.assign({}, styles.edges, {\n        from: tree.idx,\n        to: c.idx,\n    }))\n\n\tfillGraph(tree, nodes, edges)\n    function fillGraph(tree, nodes, edges){\n        if(tree.children) {\n            tree.children.forEach(c => {\n                nodes.push(Object.assign({}, styles.nodes, {\n                    id: c.idx,\n                    label: c.name,\n\t\t\t\t\tisLeaf: c.children.length === 0,\n                }))\n                edges.push(Object.assign({}, styles.edges, {\n                    from: tree.idx,\n                    to: c.idx,\n\t\t\t\t\tisLeaf: c.children.length === 0,\n                }))\n                fillGraph(c, nodes, edges)\n            })\n        }\n    }\n\n\tif(options){\n\t\tconst { customizeNodes, customizeEdges } = options\n\t\tif(customizeNodes){\n\t\t\tnodes = customizeNodes(nodes)\n\t\t}\n\t\tif(customizeEdges){\n\t\t\tedges = customizeEdges(edges)\n\t\t}\n\t}\n\n    return {\n        nodes: nodes,\n        edges: edges,\n    }\n}\n","import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport actions from '../../actions'\nimport {\n    Col,\n    Row,\n    Input,\n    InputGroup,\n    InputGroupAddon,\n    Button\n} from 'reactstrap'\nimport {NotificationManager, NotificationContainer} from 'react-notifications'\n\nimport 'react-notifications/lib/notifications.css';\n\nconst {cleanLabelMessages, createLabelTree} = actions\n\nclass CreateLabelTree extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            createLabelname: '',\n            createLabeldescription: '',\n            createLabelabbreviation: '',\n            createLabelextID: ''\n        }\n\n        this.handleCreateLabelName = this\n            .handleCreateLabelName\n            .bind(this)\n        this.handleCreateLabelDescription = this\n            .handleCreateLabelDescription\n            .bind(this)\n        this.handleCreateSave = this\n            .handleCreateSave\n            .bind(this)\n        this.handleCreateClear = this\n            .handleCreateClear\n            .bind(this)\n\n    }\n    handleCreateClear() {\n        this.setState({createLabelname: '', createLabeldescription: '', createLabelabbreviation: '', createLabelextID: ''})\n    }\n    handleCreateLabelName(e) {\n        this.setState({createLabelname: e.target.value})\n    }\n    handleCreateLabelDescription(e) {\n        this.setState({createLabeldescription: e.target.value})\n    }\n\n    handleCreateSave(e) {\n        const saveData = {\n            is_root: true,\n            name: this.state.createLabelname,\n            description: this.state.createLabeldescription,\n            abbreviation: this.state.createLabelabbreviation,\n            external_id: this.state.createLabelextID,\n            parent_leaf_id: this.state.editLabelid\n        }\n        this\n            .props\n            .createLabelTree(saveData)\n        this.handleCreateClear()\n    }\n\n    componentDidUpdate() {\n        if (this.props.createMessage === 'success') {\n            NotificationManager.success(`LabelTree created.`)\n        } else if (this.props.createMessage !== '') {\n            NotificationManager.error(this.props.createMessage)\n        }\n        this\n            .props\n            .cleanLabelMessages()\n    }\n    render() {\n        return (\n            <Row style={{\n                padding: '0 0 10px 0'\n            }}>\n                <Col xs='12' sm='12' lg='12'>\n                    <Row>\n                        <InputGroup>\n                            <Input\n                                type=\"text\"\n                                placeholder=\"name\"\n                                value={this.state.createLabelname}\n                                onChange={this.handleCreateLabelName}></Input>\n                            <Input\n                                type=\"text\"\n                                placeholder=\"description\"\n                                value={this.state.createLabeldescription}\n                                onChange={this.handleCreateLabelDescription}></Input>\n                            <InputGroupAddon addonType=\"append\">\n                                <Button className='btn-info' onClick={this.handleCreateSave}>Create</Button>\n                                <Button className='btn-danger' onClick={this.handleCreateClear}>&nbsp;Clear&nbsp;</Button>\n                            </InputGroupAddon>\n                        </InputGroup>\n                    </Row>\n                </Col>\n                <NotificationContainer/>\n            </Row>\n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n    return ({createMessage: state.label.createLabelTreeMessage})\n}\n\nexport default connect(mapStateToProps, {cleanLabelMessages, createLabelTree})(CreateLabelTree)","import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport actions from '../actions'\nimport {\n    CardHeader,\n    Card,\n    CardBody,\n    Col,\n    Row\n} from 'reactstrap'\nimport LabelTreeTable from '../components/Labels/LabelTreeTable';\nimport LabelTree from '../components/Labels/LabelTree';\nimport CreateLabelTree from '../components/Labels/CreateLabelTree';\n\n\n\nconst {getLabelTrees} = actions\n  \n\nclass Label extends Component {\n    constructor(props){\n        super(props)\n        this.selectTree = this.selectTree.bind(this)\n        this.state = {\n            selectedTreeId: null\n        }\n    }\n \n    selectTree(id){\n        this.setState({selectedTreeId: id})\n    }\n    componentDidMount() {\n        this.props.getLabelTrees()\n    }\n    render() {\n        return (\n            <div>\n                <Row>\n                    <Col xs='12' sm='12' lg='12'>\n                        <Card className='text-black'>\n                        <CardHeader>\n                            Label Trees\n                        </CardHeader>\n                            <CardBody className='pb-0'>\n                            <CreateLabelTree></CreateLabelTree>\n                            <LabelTreeTable labelTrees={this.props.trees} callback={this.selectTree}></LabelTreeTable>\n                        </CardBody> \n                        </Card>\n                        <Card>\n                            <CardBody>\n                            <LabelTree labelTree={this.props.trees[this.state.selectedTreeId]}></LabelTree>\n                            </CardBody>\n                        </Card>\n                    </Col>\n                </Row>\n            </div>\n        )\n    }\n}\n\n\nfunction mapStateToProps(state) {\n    return {trees: state.label.trees}\n}\n\nexport default connect(mapStateToProps, {getLabelTrees})(Label)\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar CardHeader = function CardHeader(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card-header'), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nCardHeader.propTypes = propTypes;\nCardHeader.defaultProps = defaultProps;\nexport default CardHeader;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nimport Fade from './Fade';\nvar propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  closeClassName: PropTypes.string,\n  closeAriaLabel: PropTypes.string,\n  cssModule: PropTypes.object,\n  color: PropTypes.string,\n  fade: PropTypes.bool,\n  isOpen: PropTypes.bool,\n  toggle: PropTypes.func,\n  tag: tagPropType,\n  transition: PropTypes.shape(Fade.propTypes),\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.func])\n};\nvar defaultProps = {\n  color: 'success',\n  isOpen: true,\n  tag: 'div',\n  closeAriaLabel: 'Close',\n  fade: true,\n  transition: _objectSpread({}, Fade.defaultProps, {\n    unmountOnExit: true\n  })\n};\n\nfunction Alert(props) {\n  var className = props.className,\n      closeClassName = props.closeClassName,\n      closeAriaLabel = props.closeAriaLabel,\n      cssModule = props.cssModule,\n      Tag = props.tag,\n      color = props.color,\n      isOpen = props.isOpen,\n      toggle = props.toggle,\n      children = props.children,\n      transition = props.transition,\n      fade = props.fade,\n      innerRef = props.innerRef,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"closeClassName\", \"closeAriaLabel\", \"cssModule\", \"tag\", \"color\", \"isOpen\", \"toggle\", \"children\", \"transition\", \"fade\", \"innerRef\"]);\n\n  var classes = mapToCssModules(classNames(className, 'alert', \"alert-\" + color, {\n    'alert-dismissible': toggle\n  }), cssModule);\n  var closeClasses = mapToCssModules(classNames('close', closeClassName), cssModule);\n\n  var alertTransition = _objectSpread({}, Fade.defaultProps, transition, {\n    baseClass: fade ? transition.baseClass : '',\n    timeout: fade ? transition.timeout : 0\n  });\n\n  return React.createElement(Fade, _extends({}, attributes, alertTransition, {\n    tag: Tag,\n    className: classes,\n    in: isOpen,\n    role: \"alert\",\n    innerRef: innerRef\n  }), toggle ? React.createElement(\"button\", {\n    type: \"button\",\n    className: closeClasses,\n    \"aria-label\": closeAriaLabel,\n    onClick: toggle\n  }, React.createElement(\"span\", {\n    \"aria-hidden\": \"true\"\n  }, \"\\xD7\")) : null, children);\n}\n\nAlert.propTypes = propTypes;\nAlert.defaultProps = defaultProps;\nexport default Alert;"],"sourceRoot":""}