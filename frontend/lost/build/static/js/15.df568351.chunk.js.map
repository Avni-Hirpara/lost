{"version":3,"sources":["components/Workers/WorkersTable.js","views/Workers.js"],"names":["getWorkers","actions","getWorkerLogFile","customStyles","content","top","left","right","bottom","marginRight","transform","width","height","maxWidth","overlay","backgroundColor","WorkersTable","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","logBlobUrl","modalIsOpen","openModal","bind","assertThisInitialized","afterOpenModal","closeModal","setState","_this2","workertimer","setInterval","worker","_this3","concat","worker_name","then","response","window","URL","createObjectURL","clearInterval","_this4","react_default","a","createElement","build","startFollowing","render","_ref","follow","onScroll","url","stream","lib_default","isOpen","onAfterOpen","onRequestClose","style","ariaHideApp","contentLabel","Card","CardHeader","className","CardBody","renderLogFile","Button","color","onClick","_this5","workers","map","statusColor","statusText","timestamp","someSecondsAgo","Date","now","key","idx","env_name","register_timestamp","toLocaleString","Badge","resources","in_progress","handleLogfileButtonClick","Fragment","renderLogFileModal","Table","hover","responsive","renderTableBody","Component","connect","mapStateToProps","Workers","Row","Col","xs","sm","lg","Workers_WorkersTable"],"mappings":"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","file":"static/js/15.df568351.chunk.js","sourcesContent":["import React, {Component} from 'react'\n\nimport {connect} from 'react-redux'\nimport {Badge, Button, Card, CardHeader, CardBody, Table} from 'reactstrap'\nimport { LazyLog, ScrollFollow } from 'react-lazylog'\nimport Modal from 'react-modal'\n\nimport actions from '../../actions'\n\n\nconst {getWorkers, getWorkerLogFile} = actions\n\nconst customStyles = {\n    content : {\n      top                   : '50%',\n      left                  : '50%',\n      right                 : 'auto',\n      bottom                : 'auto',\n      marginRight           : '-50%',\n      transform             : 'translate(-50%, -50%)',\n      width: '85%',\n      height: '85%',\n      maxWidth: '75rem'\n    },\n    overlay: {\n        backgroundColor: 'rgba(0,0,0,0.75)'\n      },\n  };\n\nclass WorkersTable extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            logBlobUrl: '',\n            modalIsOpen: false\n        }\n\n        this.openModal = this.openModal.bind(this);\n        this.afterOpenModal = this.afterOpenModal.bind(this);\n        this.closeModal = this.closeModal.bind(this);\n    }\n\n    openModal() {\n        this.setState({modalIsOpen: true});\n    }\n\n    afterOpenModal() {\n        // references are now sync'd and can be accessed.\n        //this.subtitle.style.color = '#f00';\n    }\n\n    closeModal() {\n        this.setState({modalIsOpen: false});\n    }\n\n    componentDidMount() {\n        this\n            .props\n            .getWorkers()\n        this.workertimer = setInterval(()=>  this.props.getWorkers(), 1000)\n    }\n\n     handleLogfileButtonClick(worker){\n        //const {idx,type,status} = worker\n        const logFile = this.props.getWorkerLogFile(`${worker.worker_name}.log`)\n        logFile.then(response=>\n            this.setState({logBlobUrl: window.URL.createObjectURL(response)})\n        )\n\n        this.openModal()\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.workertimer)\n        this.workertimer = null\n      }\n    \n    renderLogFile(){\n        if(this.state.logBlobUrl!=='')\n        {\n            //return(  <LazyLog url={this.state.logBlobUrl} />)\n            return( <ScrollFollow\n                startFollowing={true}\n                render={({ follow, onScroll }) => (\n                <LazyLog url={this.state.logBlobUrl} stream follow={follow} onScroll={onScroll} />\n                )}\n            />)\n        }\n        else return <div></div>\n    }\n\n    renderLogFileModal(){\n        return(\n        <Modal\n            isOpen={this.state.modalIsOpen}\n            onAfterOpen={this.afterOpenModal}\n            onRequestClose={this.closeModal}\n            style={customStyles}\n            ariaHideApp={false}\n            contentLabel=\"Logfile\"\n            >\n            <Card style={{height:'90%'}}>\n                <CardHeader><i className=\"fa fa-question-circle\"></i> Logs</CardHeader>\n                <CardBody style={{height:'100%'}}>\n                    {this.renderLogFile()}\n                </CardBody>\n                <Button color='success' onClick={this.closeModal}><i className=\"fa fa-times\"></i> Close</Button>\n            </Card>                   \n        </Modal>)    \n    }\n\n    renderTableBody() {\n        return (\n            <tbody>\n                {this.props.workers.map((worker) => {\n                    let statusColor = 'success'\n                    let statusText = 'Online'\n\n                    if (worker.timestamp){\n                        const someSecondsAgo = new Date(Date.now() - 15000) // fix this to correct timestamp\n                        const lastActivityDate = new Date(`${worker.timestamp}Z`)\n                        if(lastActivityDate < someSecondsAgo){\n                            statusColor = 'danger'\n                            statusText = 'Offline'\n                        }\n                    }\n                    return (\n                        <tr key={worker.idx}>\n                            <td className='text-center'>\n                                <div>{worker.worker_name}</div>\n                                <div className='small text-muted'>ID: {worker.idx}</div>\n                            </td>\n                            <td>\n                                <div>{worker.env_name}</div>\n                                <div className='small text-muted'>\n                                    Registered at: {new Date(`${worker.register_timestamp}Z`).toLocaleString()}\n                                </div>\n                            </td>\n                            <td className='text-center'>\n                                <div><Badge color={statusColor}>{statusText}</Badge></div>\n                                <div className='small text-muted'>\n                                    Last life sign: {new Date(`${worker.timestamp}Z`).toLocaleString()}\n                                </div>\n                            </td>\n                            <td className='text-center'>\n                                <div>{worker.resources}</div>\n                            </td>\n                            <td className='text-center'>\n                                <div>{worker.in_progress}</div>\n                            </td>\n                            <td className='text-center'>\n                                <Button onClick={()=>this.handleLogfileButtonClick(worker)}>Logs</Button>\n                            </td>\n                        </tr>\n                    )\n                })}\n            </tbody>\n\n        )\n    }\n    render() {\n        return (\n            <React.Fragment>\n                {this.renderLogFileModal()}\n                <Table hover responsive className='table-outline mb-0 d-none d-sm-table'>\n                    <thead className='thead-light'>\n                        <tr>\n                            <th className='text-center'>Name</th>\n                            <th className='text-center'>Environment</th>\n                            <th className='text-center'>Status</th>\n                            <th className='text-center'>Resources</th>\n                            <th className='text-center'>Jobs</th>\n                            <th className='text-center'>Logs</th>\n                        </tr>\n                    </thead>\n                    {this.renderTableBody()}\n                </Table>\n            </React.Fragment>\n        )\n\n    }\n}\nfunction mapStateToProps(state) {\n    return ({workers: state.worker.workers})\n}\n\nexport default connect(mapStateToProps, {getWorkers, getWorkerLogFile})(WorkersTable)\n","import React, {Component} from 'react'\nimport {Card, CardBody, Col, Row} from 'reactstrap'\n\nimport WorkersTable from '../components/Workers/WorkersTable'\n\nclass Workers extends Component {\n    render() {\n        return (\n            <Row>\n                <Col xs='12' sm='12' lg='12'>\n                    <Card className='text-black'>\n                        <CardBody>\n                            <WorkersTable></WorkersTable>\n                        </CardBody>\n                    </Card>\n                </Col>\n            </Row>\n\n        )\n    }\n}\nexport default Workers"],"sourceRoot":""}